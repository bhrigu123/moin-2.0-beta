MoinMoin Storage Version History
========================

Version 2.0:

  Removed Features:
  * Old-style storage of wiki contents as used in MoinMoin up to Version 1.9.
  * Page/PageEditor/AttachFile (and special-casing of attachments in general) are gone.
  * The 'revert' and 'delete' ACL privileges are gone.
  * Underlay is gone.

  New Features:
  * New storage API with storage backends:
    * You can choose between many forms of data storage, like filesystem or mercurial.
      * New-style filesystem backend to store data on disk.
      * Mercurial backend, that allows storing a wiki's contents with the mercurial dvcs.
    * You can use different backends at arbitrary points in the namespace, like 'Fruit/Banana'
      and 'FastFood/Burgers' which can be stored in separate backends.
    * You can protect each of these backends' contents with different ACLs. E.g. everybody can
      create new fruits, but nobody may change the existing vegetables.
    * The list of storage backends can be easily extended by developers. (SQL, Usage of Googles appengine, etc.)
    * Pages, attachments and users are now uniformly stored within those backends as 'items'.
    * Attachments are accessible via wiki.example.com/mypage/myattachment
    * Should your requirements change, you can easily switch between different backends (clone script).
    * Possibility to serialize and unserialize a complete wiki with XML, e.g. to transport it to a different host.
    * Instead of underlay, we now use serialized items and load them into the storage backend directly.
    * A new trashbin with its own namespace like 'Trash/' where all deleted items end up. You can mount that
      namespace to a different backend to wipe your wiki clean from time to time.

  * ACL changes:
      * 'create' ACL privilege, granting permission to create a new item.
      * 'destroy' ACL privilege, granting permission to completely erase an item (irreversibly) from storage. 

  * Common mimetype-based UI for all kinds of items.

  Developer notes:
  * All test cases (not only classes) now have their own request object with a fresh in-memory storage backend.
    If your tests need content to be present in the backend already, you can provide a config at class level and
    preload your data from an XML file (preloading is done per testcase).

